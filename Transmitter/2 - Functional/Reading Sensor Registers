#include <stdio.h>
#include "boards.h"
#include "app_util_platform.h"
#include "app_error.h"
#include "nrf_drv_twi.h"
#include "nrfx_twi.h"

#include "nrf_delay.h"

//#include "bmm150.h"

#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"

/* TWI instance ID. */
#define TWI_INSTANCE_ID     0

uint8_t dataKeeper;

/* Indicates if operation on TWI has ended. */
static volatile bool m_xfer_done = false;

/* TWI instance. */
static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE(TWI_INSTANCE_ID);

/* Buffer for samples read from temperature sensor. */
static uint8_t m_sample;

uint8_t reg_data;

uint8_t ASD[] = {7};

const uint8_t registerArrayTX[] = {0x4D};

void twi_init (void)
{
    ret_code_t err_code;

    const nrf_drv_twi_config_t twi_lm75b_config = {
       .scl                = NRF_GPIO_PIN_MAP(0, 27),
       .sda                = NRF_GPIO_PIN_MAP(0, 26),
       .frequency          = NRF_DRV_TWI_FREQ_100K,
       .interrupt_priority = APP_IRQ_PRIORITY_HIGH,
       .clear_bus_init     = false
    };

    err_code = nrf_drv_twi_init(&m_twi, &twi_lm75b_config, NULL, NULL);
    //printf("Error Code init\t%d\n", err_code);

    nrf_drv_twi_enable(&m_twi);
}

/**
 * @brief Function for main application entry.
 */
int main(void)
{

    twi_init();

    ret_code_t tx_code;
    ret_code_t rx_code;

    if(TWI_COUNT != 0){
      printf("TWI Count:\t%d\n", TWI_COUNT);
    }

    nrf_delay_ms(500);
    tx_code = nrf_drv_twi_tx(&m_twi, 0x10, &registerArrayTX, 1, true);
    printf("TX Code:\t%d\n", tx_code);
    
    nrf_delay_ms(1500);
    
    rx_code = nrf_drv_twi_rx(&m_twi, 0x10, ASD, 1);
    printf("RX Code:\t%d\n", rx_code);
    printf("ASD: \t%d\n", ASD[0]);

}
